apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: "jacoco"

repositories {
  mavenCentral()
}

dependencies {
  testCompile 'junit:junit:4.12'
}

javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compile
}

findbugs {
  ignoreFailures = true
  findbugsTest.enabled = false
  effort = "max"
}

pmd {
  ignoreFailures = true
  pmdTest.enabled = false
  ruleSets = [
   'java-basic',
            'java-braces',
            'java-clone',
            'java-codesize',
            'java-comments',
            'java-controversial',
            'java-coupling',
            'java-design',
            'java-empty',
            'java-finalizers',
            'java-imports',
            'java-optimizations',
            'java-strictexception',
            'java-strings',
            'java-typeresolution',
            'java-unnecessary',
            'java-unusedcode'
    ]
}

checkstyle {
  ignoreFailures = true
  findbugsTest.enabled = false
  sourceSets = [project.sourceSets.main]
}




task cpdMain(dependsOn: 'pmdMain') {
  ext.ignoreFailures = true

  doLast {
    File outDir = new File(reporting.baseDir, 'cpd/')
    // Make sure the output dir exists to prevent a ReportException
    outDir.mkdirs()

    ant.taskdef(name: 'cpd', classname: 'net.sourceforge.pmd.cpd.CPDTask',
            classpath: configurations.pmd.asPath)

    ant.cpd(
        minimumTokenCount: '100',
        format: 'xml',
        outputFile: new File(outDir , 'main.xml')) {
        fileset(dir: projectDir.getPath()) {
              sourceSets.main.java.each { sourceDir ->
                include(name: project.relativePath(sourceDir.getPath()))
            }
          }
    }
  }
}
check.dependsOn cpdMain

jacoco {
    toolVersion = "0.7.9"
    reportsDir = file("$buildDir/customJacocoReportDir")
}
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacocoHtml")
    }
}
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.5
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}
